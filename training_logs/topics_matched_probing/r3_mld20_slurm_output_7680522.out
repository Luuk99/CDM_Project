/sw/arch/Debian10/EB_production/2019/software/Anaconda3/2018.12/lib/python3.7/site-packages/sklearn/feature_extraction/image.py:167: DeprecationWarning: `np.int` is a deprecated alias for the builtin `int`. To silence this warning, use `int` by itself. Doing this will not modify any behavior and is safe. When replacing `np.int`, you may wish to use e.g. `np.int64` or `np.int32` to specify the precision. If you wish to review your current use, check the release note link for additional information.
Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
  dtype=np.int):
/sw/arch/Debian10/EB_production/2019/software/Anaconda3/2018.12/lib/python3.7/site-packages/sklearn/linear_model/least_angle.py:35: DeprecationWarning: `np.float` is a deprecated alias for the builtin `float`. To silence this warning, use `float` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.float64` here.
Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
  eps=np.finfo(np.float).eps,
/sw/arch/Debian10/EB_production/2019/software/Anaconda3/2018.12/lib/python3.7/site-packages/sklearn/linear_model/least_angle.py:597: DeprecationWarning: `np.float` is a deprecated alias for the builtin `float`. To silence this warning, use `float` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.float64` here.
Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
  eps=np.finfo(np.float).eps, copy_X=True, fit_path=True,
/sw/arch/Debian10/EB_production/2019/software/Anaconda3/2018.12/lib/python3.7/site-packages/sklearn/linear_model/least_angle.py:836: DeprecationWarning: `np.float` is a deprecated alias for the builtin `float`. To silence this warning, use `float` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.float64` here.
Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
  eps=np.finfo(np.float).eps, copy_X=True, fit_path=True,
/sw/arch/Debian10/EB_production/2019/software/Anaconda3/2018.12/lib/python3.7/site-packages/sklearn/linear_model/least_angle.py:862: DeprecationWarning: `np.float` is a deprecated alias for the builtin `float`. To silence this warning, use `float` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.float64` here.
Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
  eps=np.finfo(np.float).eps, positive=False):
/sw/arch/Debian10/EB_production/2019/software/Anaconda3/2018.12/lib/python3.7/site-packages/sklearn/linear_model/least_angle.py:1097: DeprecationWarning: `np.float` is a deprecated alias for the builtin `float`. To silence this warning, use `float` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.float64` here.
Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
  max_n_alphas=1000, n_jobs=None, eps=np.finfo(np.float).eps,
/sw/arch/Debian10/EB_production/2019/software/Anaconda3/2018.12/lib/python3.7/site-packages/sklearn/linear_model/least_angle.py:1344: DeprecationWarning: `np.float` is a deprecated alias for the builtin `float`. To silence this warning, use `float` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.float64` here.
Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
  max_n_alphas=1000, n_jobs=None, eps=np.finfo(np.float).eps,
/sw/arch/Debian10/EB_production/2019/software/Anaconda3/2018.12/lib/python3.7/site-packages/sklearn/linear_model/least_angle.py:1480: DeprecationWarning: `np.float` is a deprecated alias for the builtin `float`. To silence this warning, use `float` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.float64` here.
Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
  eps=np.finfo(np.float).eps, copy_X=True, positive=False):
/sw/arch/Debian10/EB_production/2019/software/Anaconda3/2018.12/lib/python3.7/site-packages/sklearn/linear_model/randomized_l1.py:152: DeprecationWarning: `np.float` is a deprecated alias for the builtin `float`. To silence this warning, use `float` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.float64` here.
Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
  precompute=False, eps=np.finfo(np.float).eps,
/sw/arch/Debian10/EB_production/2019/software/Anaconda3/2018.12/lib/python3.7/site-packages/sklearn/linear_model/randomized_l1.py:320: DeprecationWarning: `np.float` is a deprecated alias for the builtin `float`. To silence this warning, use `float` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.float64` here.
Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
  eps=np.finfo(np.float).eps, random_state=None,
/sw/arch/Debian10/EB_production/2019/software/Anaconda3/2018.12/lib/python3.7/site-packages/sklearn/linear_model/randomized_l1.py:580: DeprecationWarning: `np.float` is a deprecated alias for the builtin `float`. To silence this warning, use `float` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.float64` here.
Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
  eps=4 * np.finfo(np.float).eps, n_jobs=None,
-----TRAINING PARAMETERS-----
Model version: QA
Labels: strict
Setting: matched
Test scenario: None
Auxilary tasks: ['TOPICS']
Auxilary task probing: True
PyTorch device: cuda
Max epochs: 5
Patience: 3
Learning rates: [5e-05, 2e-05]
Batch size: 8
Results directory: ./mtl_results
Progress bar: False
-----------------------------
Loading datasets..
Pre-loading annotations for most important word in answer
[nltk_data] Downloading package wordnet to /home/lcur0659/nltk_data...
Pre-loading annotations for topics in answer
[nltk_data]   Package wordnet is already up-to-date!
After removing empty topics, we have 12068; 3994; and 4045 samples for (respectively) train, dev, test sets for topic aux task
Datasets loaded
Loading model..
Model loaded
Starting training..
Epoch 0:
Dev results:
{'TOPICS': {'loss': 2.5735, 'accuracy': 0.0104}, 'Circa': {'loss': 1.799, 'accuracy': 0.1521}, 'time': {'elapsed_time': '0:02:40.501039'}}
Epoch 1:
Train results:
{'TOPICS': {'loss': 1.0901, 'accuracy': 0.6533}, 'Circa': {'loss': 0.77, 'accuracy': 0.7346}, 'time': {'elapsed_time': '0:27:50.801633'}}
Dev results:
{'TOPICS': {'loss': 0.64, 'accuracy': 0.8088}, 'Circa': {'loss': 0.6548, 'accuracy': 0.7713}, 'time': {'elapsed_time': '0:03:56.834416'}}
Saving new best model..
New best model saved
---
Epoch 2:
Train results:
{'Circa': {'loss': 0.537, 'accuracy': 0.82}, 'TOPICS': {'loss': 0.4313, 'accuracy': 0.874}, 'time': {'elapsed_time': '0:28:48.914588'}}
Dev results:
{'TOPICS': {'loss': 0.5225, 'accuracy': 0.8515}, 'Circa': {'loss': 0.6282, 'accuracy': 0.8055}, 'time': {'elapsed_time': '0:03:56.026908'}}
Saving new best model..
New best model saved
---
Epoch 3:
Train results:
{'Circa': {'loss': 0.3986, 'accuracy': 0.8691}, 'TOPICS': {'loss': 0.2379, 'accuracy': 0.9331}, 'time': {'elapsed_time': '0:28:44.169091'}}
Dev results:
{'TOPICS': {'loss': 0.5094, 'accuracy': 0.8801}, 'Circa': {'loss': 0.6099, 'accuracy': 0.8046}, 'time': {'elapsed_time': '0:03:54.562656'}}
---
Epoch 4:
Train results:
{'Circa': {'loss': 0.305, 'accuracy': 0.8991}, 'TOPICS': {'loss': 0.1484, 'accuracy': 0.9592}, 'time': {'elapsed_time': '0:28:39.393135'}}
Dev results:
{'TOPICS': {'loss': 0.5342, 'accuracy': 0.878}, 'Circa': {'loss': 0.6815, 'accuracy': 0.8033}, 'time': {'elapsed_time': '0:03:55.331894'}}
---
Epoch 5:
Train results:
{'TOPICS': {'loss': 0.0962, 'accuracy': 0.9737}, 'Circa': {'loss': 0.2366, 'accuracy': 0.9211}, 'time': {'elapsed_time': '0:28:08.214472'}}
Dev results:
{'TOPICS': {'loss': 0.5826, 'accuracy': 0.8777}, 'Circa': {'loss': 0.7402, 'accuracy': 0.8067}, 'time': {'elapsed_time': '0:03:27.696199'}}
Saving new best model..
New best model saved
---
Training finished
Loading best model..
Best model loaded
Starting testing..
Test results:
{'Circa': {'loss': 0.7607, 'accuracy': 0.8032}, 'TOPICS': {'loss': 0.6111, 'accuracy': 0.868}, 'time': {'elapsed_time': '0:03:26.576647'}}
Testing finished
Saving results..
Results saved
