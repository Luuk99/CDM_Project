/sw/arch/Debian10/EB_production/2019/software/Anaconda3/2018.12/lib/python3.7/site-packages/sklearn/feature_extraction/image.py:167: DeprecationWarning: `np.int` is a deprecated alias for the builtin `int`. To silence this warning, use `int` by itself. Doing this will not modify any behavior and is safe. When replacing `np.int`, you may wish to use e.g. `np.int64` or `np.int32` to specify the precision. If you wish to review your current use, check the release note link for additional information.
Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
  dtype=np.int):
/sw/arch/Debian10/EB_production/2019/software/Anaconda3/2018.12/lib/python3.7/site-packages/sklearn/linear_model/least_angle.py:35: DeprecationWarning: `np.float` is a deprecated alias for the builtin `float`. To silence this warning, use `float` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.float64` here.
Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
  eps=np.finfo(np.float).eps,
/sw/arch/Debian10/EB_production/2019/software/Anaconda3/2018.12/lib/python3.7/site-packages/sklearn/linear_model/least_angle.py:597: DeprecationWarning: `np.float` is a deprecated alias for the builtin `float`. To silence this warning, use `float` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.float64` here.
Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
  eps=np.finfo(np.float).eps, copy_X=True, fit_path=True,
/sw/arch/Debian10/EB_production/2019/software/Anaconda3/2018.12/lib/python3.7/site-packages/sklearn/linear_model/least_angle.py:836: DeprecationWarning: `np.float` is a deprecated alias for the builtin `float`. To silence this warning, use `float` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.float64` here.
Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
  eps=np.finfo(np.float).eps, copy_X=True, fit_path=True,
/sw/arch/Debian10/EB_production/2019/software/Anaconda3/2018.12/lib/python3.7/site-packages/sklearn/linear_model/least_angle.py:862: DeprecationWarning: `np.float` is a deprecated alias for the builtin `float`. To silence this warning, use `float` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.float64` here.
Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
  eps=np.finfo(np.float).eps, positive=False):
/sw/arch/Debian10/EB_production/2019/software/Anaconda3/2018.12/lib/python3.7/site-packages/sklearn/linear_model/least_angle.py:1097: DeprecationWarning: `np.float` is a deprecated alias for the builtin `float`. To silence this warning, use `float` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.float64` here.
Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
  max_n_alphas=1000, n_jobs=None, eps=np.finfo(np.float).eps,
/sw/arch/Debian10/EB_production/2019/software/Anaconda3/2018.12/lib/python3.7/site-packages/sklearn/linear_model/least_angle.py:1344: DeprecationWarning: `np.float` is a deprecated alias for the builtin `float`. To silence this warning, use `float` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.float64` here.
Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
  max_n_alphas=1000, n_jobs=None, eps=np.finfo(np.float).eps,
/sw/arch/Debian10/EB_production/2019/software/Anaconda3/2018.12/lib/python3.7/site-packages/sklearn/linear_model/least_angle.py:1480: DeprecationWarning: `np.float` is a deprecated alias for the builtin `float`. To silence this warning, use `float` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.float64` here.
Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
  eps=np.finfo(np.float).eps, copy_X=True, positive=False):
/sw/arch/Debian10/EB_production/2019/software/Anaconda3/2018.12/lib/python3.7/site-packages/sklearn/linear_model/randomized_l1.py:152: DeprecationWarning: `np.float` is a deprecated alias for the builtin `float`. To silence this warning, use `float` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.float64` here.
Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
  precompute=False, eps=np.finfo(np.float).eps,
/sw/arch/Debian10/EB_production/2019/software/Anaconda3/2018.12/lib/python3.7/site-packages/sklearn/linear_model/randomized_l1.py:320: DeprecationWarning: `np.float` is a deprecated alias for the builtin `float`. To silence this warning, use `float` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.float64` here.
Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
  eps=np.finfo(np.float).eps, random_state=None,
/sw/arch/Debian10/EB_production/2019/software/Anaconda3/2018.12/lib/python3.7/site-packages/sklearn/linear_model/randomized_l1.py:580: DeprecationWarning: `np.float` is a deprecated alias for the builtin `float`. To silence this warning, use `float` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.float64` here.
Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
  eps=4 * np.finfo(np.float).eps, n_jobs=None,
-----TRAINING PARAMETERS-----
Model version: QA
Labels: strict
Setting: matched
Test scenario: None
Auxilary tasks: ['TOPICS']
Auxilary task probing: True
PyTorch device: cuda
Max epochs: 5
Patience: 3
Learning rates: [5e-05, 2e-05]
Batch size: 8
Results directory: ./mtl_results
Progress bar: False
-----------------------------
Loading datasets..
Pre-loading annotations for most important word in answer
[nltk_data] Downloading package wordnet to /home/lcur0659/nltk_data...
Pre-loading annotations for topics in answer
[nltk_data]   Package wordnet is already up-to-date!
After removing empty topics, we have 12068; 4049; and 3990 samples for (respectively) train, dev, test sets for topic aux task
Datasets loaded
Loading model..
Model loaded
Starting training..
Epoch 0:
Dev results:
{'Circa': {'loss': 1.7988, 'accuracy': 0.1481}, 'TOPICS': {'loss': 3.114, 'accuracy': 0.0456}, 'time': {'elapsed_time': '0:01:56.472389'}}
Epoch 1:
Train results:
{'Circa': {'loss': 0.758, 'accuracy': 0.7364}, 'TOPICS': {'loss': 1.3777, 'accuracy': 0.6336}, 'time': {'elapsed_time': '0:17:45.015118'}}
Dev results:
{'TOPICS': {'loss': 0.7896, 'accuracy': 0.8009}, 'Circa': {'loss': 0.6473, 'accuracy': 0.7748}, 'time': {'elapsed_time': '0:02:00.997620'}}
Saving new best model..
New best model saved
---
Epoch 2:
Train results:
{'Circa': {'loss': 0.5283, 'accuracy': 0.8202}, 'TOPICS': {'loss': 0.5783, 'accuracy': 0.8575}, 'time': {'elapsed_time': '0:18:08.624363'}}
Dev results:
{'Circa': {'loss': 0.6419, 'accuracy': 0.7765}, 'TOPICS': {'loss': 0.6275, 'accuracy': 0.8508}, 'time': {'elapsed_time': '0:02:09.056084'}}
Saving new best model..
New best model saved
---
Epoch 3:
Train results:
{'TOPICS': {'loss': 0.3155, 'accuracy': 0.9224}, 'Circa': {'loss': 0.399, 'accuracy': 0.8669}, 'time': {'elapsed_time': '0:17:50.866631'}}
Dev results:
{'Circa': {'loss': 0.5989, 'accuracy': 0.8113}, 'TOPICS': {'loss': 0.6245, 'accuracy': 0.8533}, 'time': {'elapsed_time': '0:01:58.685781'}}
Saving new best model..
New best model saved
---
Epoch 4:
Train results:
{'TOPICS': {'loss': 0.4414, 'accuracy': 0.8692}, 'Circa': {'loss': 0.4113, 'accuracy': 0.8494}, 'time': {'elapsed_time': '0:17:25.750570'}}
Dev results:
{'TOPICS': {'loss': 2.5769, 'accuracy': 0.1568}, 'Circa': {'loss': 1.2785, 'accuracy': 0.3472}, 'time': {'elapsed_time': '0:01:57.757101'}}
---
Epoch 5:
Train results:
{'Circa': {'loss': 1.2819, 'accuracy': 0.4489}, 'TOPICS': {'loss': 2.5618, 'accuracy': 0.1397}, 'time': {'elapsed_time': '0:17:29.403265'}}
Dev results:
{'TOPICS': {'loss': 2.5237, 'accuracy': 0.1441}, 'Circa': {'loss': 1.2772, 'accuracy': 0.4676}, 'time': {'elapsed_time': '0:01:57.713764'}}
---
Training finished
Loading best model..
Best model loaded
Starting testing..
Test results:
{'Circa': {'loss': 0.5866, 'accuracy': 0.8105}, 'TOPICS': {'loss': 0.6405, 'accuracy': 0.852}, 'time': {'elapsed_time': '0:01:58.036596'}}
Testing finished
Saving results..
Results saved
